# =============================================================================
# SIMPLE 2-SERVER CONFIGURATION - CLEAR HANDLER DIFFERENCES
# =============================================================================
# Server 1: Static & CGI Server (Port 8000)
# Server 2: API & Upload Server (Port 8001)
# Clear separation of functionality to demonstrate routing differences
# =============================================================================

# -----------------------------------------------------------------------------
# SERVER 1: STATIC CONTENT & CGI SCRIPTS
# Focus: Static files, CGI execution, basic redirects
# -----------------------------------------------------------------------------
server {
    server_name static_cgi_server
    listen 8000
    host 127.0.0.1
    root /home/ilyam/42/webserver/www
    index index.html

    # ROOT: Basic static file serving
    location / {
        allow_methods GET HEAD
        index index.html
        autoindex off
    }

    # CGI SCRIPTS: Python and JavaScript execution
    location /cgi-bin {
        allow_methods GET HEAD POST
        cgi_path /home/ilyam/42/webserver/www/cgi-bin
        cgi_ext .py .js
        index index.html
    }

    # IMAGES: Directory listing for images
    location /imgs {
        allow_methods GET HEAD
        index nonexistent.html
        autoindex on
    }

    # FAVICON: Static file serving
    location /favicon.ico {
        allow_methods GET HEAD
        index favicon.ico
    }

    # REDIRECT: Simple page redirect
    location /old-page {
        allow_methods GET HEAD
        return /imgs
    }
}

# -----------------------------------------------------------------------------
# SERVER 2: API ENDPOINTS & FILE MANAGEMENT
# Focus: API responses, file uploads, admin functions
# -----------------------------------------------------------------------------
server {
    server_name api_upload_server
    listen 8001
    host 127.0.0.1
    root /home/ilyam/42/webserver/www
    index index.html

    # ROOT: API landing page
    location / {
        allow_methods GET HEAD
        index api_landing.html
        autoindex off
    }

    # API ENDPOINT: REST API with multiple methods
    location /api {
        allow_methods GET HEAD POST PUT DELETE OPTIONS
        index api_response.html
        autoindex off
    }

    # FILE UPLOAD: Upload handling with all methods
    location /uploads {
        allow_methods GET HEAD POST PUT DELETE OPTIONS
        upload_to /home/ilyam/42/webserver/www/uploads
        index upload_success.html
    }

    # ADMIN AREA: Administrative functions
    location /admin {
        allow_methods GET HEAD POST
        index admin_dashboard.html
        autoindex off
    }

    # ERRORS: Error page directory
    location /errors {
        allow_methods GET HEAD
        index nonexistent.html
        autoindex on
    }

    # REDIRECT: API version redirect
    location /api/v1 {
        allow_methods GET HEAD POST PUT DELETE OPTIONS
        return /api
    }
}

# -----------------------------------------------------------------------------
# TEST CASES - CLEAR HANDLER DIFFERENCES DEMONSTRATION
# -----------------------------------------------------------------------------
# Start with: ./webserv configs/ilia_2.conf
# Two servers will run simultaneously on different ports

# =============================================================================
# SERVER 1: STATIC & CGI SERVER (Port 8000)
# Focus: Static content, CGI execution, directory listings
# =============================================================================
#
# STATIC FILE SERVING:
# curl http://localhost:8000/                    -> index.html
# curl http://localhost:8000/favicon.ico         -> favicon.ico
#
# DIRECTORY LISTING:
# curl http://localhost:8000/imgs                -> image directory listing
#
# CGI SCRIPT EXECUTION:
# curl http://localhost:8000/cgi-bin/hello.py    -> Execute Python CGI
# curl http://localhost:8000/cgi-bin/hello.js    -> Execute JavaScript CGI
# curl -X POST -d "test=data" http://localhost:8000/cgi-bin/hello.py
#
# REDIRECTS:
# curl http://localhost:8000/old-page            -> Redirect to /imgs
#
# WHAT WON'T WORK ON SERVER 1:
# curl http://localhost:8000/api                 -> 404 (no API routes)
# curl http://localhost:8000/uploads             -> 404 (no upload routes)
# curl http://localhost:8000/admin               -> 404 (no admin routes)
# curl -X POST http://localhost:8000/            -> 405 (only GET/HEAD allowed)

# =============================================================================
# SERVER 2: API & UPLOAD SERVER (Port 8001)
# Focus: REST API, file uploads, admin functions, error pages
# =============================================================================
#
# API ENDPOINTS:
# curl http://localhost:8001/                    -> api_landing.html
# curl http://localhost:8001/api                 -> api_response.html
# curl -X POST http://localhost:8001/api         -> API with POST
# curl -X PUT http://localhost:8001/api          -> API with PUT
# curl -X DELETE http://localhost:8001/api       -> API with DELETE
# curl -X OPTIONS http://localhost:8001/api      -> CORS preflight
#
# FILE UPLOAD & MANAGEMENT:
# curl http://localhost:8001/uploads             -> Directory listing
# curl -X POST -F "file=@test.txt" http://localhost:8001/uploads
# curl -X DELETE http://localhost:8001/uploads/test.txt
# curl -X OPTIONS http://localhost:8001/uploads  -> CORS preflight
#
# ADMIN FUNCTIONS:
# curl http://localhost:8001/admin               -> admin_dashboard.html
# curl -X POST http://localhost:8001/admin       -> Admin with POST
#
# ERROR PAGES:
# curl http://localhost:8001/errors              -> Error page directory
#
# REDIRECTS:
# curl http://localhost:8001/api/v1              -> Redirect to /api
#
# WHAT WON'T WORK ON SERVER 2:
# curl http://localhost:8001/cgi-bin/hello.py    -> 404 (no CGI routes)
# curl http://localhost:8001/favicon.ico         -> 404 (no favicon route)
# curl http://localhost:8001/imgs                -> 404 (imgs route on server 1 only)

# =============================================================================
# CROSS-SERVER ISOLATION DEMONSTRATION
# =============================================================================
# These requests show how servers are completely isolated:
#
# SERVER 1 routes that don't exist on SERVER 2:
# curl http://localhost:8001/cgi-bin/hello.py    -> 404 (SERVER 2 has no CGI)
# curl http://localhost:8001/favicon.ico         -> 404 (SERVER 2 has no favicon)
#
# SERVER 2 routes that don't exist on SERVER 1:
# curl http://localhost:8000/api                 -> 404 (SERVER 1 has no API)
# curl http://localhost:8000/uploads             -> 404 (SERVER 1 has no uploads)
# curl http://localhost:8000/admin               -> 404 (SERVER 1 has no admin)
#
# METHOD RESTRICTIONS:
# curl -X POST http://localhost:8000/            -> 405 (SERVER 1 root only allows GET/HEAD)
# curl -X PUT http://localhost:8001/             -> 405 (SERVER 2 root only allows GET/HEAD)

# =============================================================================
# SERVER COMPARISON SUMMARY
# =============================================================================
#
# SERVER 1 (Static & CGI):
# - Ports: 8000
# - Purpose: Static content and CGI execution
# - Routes: /, /cgi-bin/*, /imgs, /favicon.ico, /old-page
# - Methods: Mostly GET/HEAD, some POST for CGI
# - Features: CGI scripts, directory listings, redirects
#
# SERVER 2 (API & Upload):
# - Ports: 8001
# - Purpose: API endpoints and file management
# - Routes: /, /api, /uploads, /admin, /errors, /api/v1
# - Methods: Full REST (GET/POST/PUT/DELETE/OPTIONS)
# - Features: File uploads, admin functions, API redirects
#
# This configuration clearly demonstrates:
# 1. Complete server isolation - each server only responds to its routes
# 2. Different handler types per server
# 3. Method restrictions per location
# 4. Server-aware routing implementation
# =============================================================================
