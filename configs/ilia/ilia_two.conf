# =============================================================================
# REAL 2-SERVER CONFIGURATION - FUNCTIONAL WEBSERVER
# =============================================================================
# Server 1: Static Content Server (Port 8080)
# Server 2: API & Upload Server (Port 8081)
# Based on actual existing files and functionality
# =============================================================================

# -----------------------------------------------------------------------------
# SERVER 1: STATIC CONTENT SERVER
# Focus: Static files, CGI execution, directory listings, redirects
# -----------------------------------------------------------------------------
server {
    server_name static_server
    listen 8087
    host 127.0.0.1
    root /home/ilyam/42/webserver/www
    index index.html

    # ROOT: Main landing page with file upload/delete links
    location / {
        allow_methods GET
        index index.html
        autoindex off
    }

    # CGI SCRIPTS: Python and JavaScript execution
    location /cgi-bin {
        allow_methods GET POST
        # cgi_path /cgi-bin
        cgi_path /home/ilyam/42/webserver/www/cgi-bin
        cgi_ext .py .js
        index index.html
    }

    # IMAGES: Directory listing for actual image files
    location /imgs {
        allow_methods GET
        index index.html
        autoindex on
    }

    # FAVICON: Static favicon file
    location /favicon.ico {
        allow_methods GET
        index index.html
        autoindex off
    }

    # TEST DIRECTORY: Directory with index file
    location /testdir {
        allow_methods GET
        index index.html
        autoindex off
    }

    # REDIRECT: Simple page redirect to images
    location /old-page {
        allow_methods GET
        index index.html
        return /imgs
    }
}

# -----------------------------------------------------------------------------
# SERVER 2: API & FILE MANAGEMENT SERVER
# Focus: API responses, file uploads, admin functions, error pages
# -----------------------------------------------------------------------------
server {
    server_name api_server
    listen 8088
    host 127.0.0.1
    root /home/ilyam/42/webserver/www
    index index.html

    # ROOT: API landing page
    location / {
        allow_methods GET
        index api_landing.html
        autoindex off
    }

    # API ENDPOINT: REST API response
    location /api {
        allow_methods GET POST
        index api_response.html
        autoindex off
    }

    # FILE UPLOAD: Upload handling and file management
    location /uploads {
        allow_methods GET POST DELETE
        upload_to /home/ilyam/42/webserver/www/uploads
        index index.html
        autoindex on
    }

    # ADMIN AREA: Administrative dashboard
    location /admin {
        allow_methods GET POST
        index admin_dashboard.html
        autoindex off
    }

    # ERRORS: Error page directory with actual error files
    location /errors {
        allow_methods GET
        index index.html
        autoindex on
    }

    # REDIRECT: API version redirect
    location /api/v1 {
        allow_methods GET POST
        index index.html
        return /api
    }
}

# -----------------------------------------------------------------------------
# TEST CASES - FUNCTIONAL WEBSERVER DEMONSTRATION
# -----------------------------------------------------------------------------
# Start with: ./webserv configs/ilia_two.conf
# Two servers will run simultaneously on different ports

# =============================================================================
# SERVER 1: STATIC CONTENT SERVER (Port 8080)
# Focus: Static files, CGI execution, directory listings
# =============================================================================
#
# STATIC FILE SERVING:
# curl http://localhost:8080/                     -> index.html (main page)
# curl http://localhost:8080/favicon.ico          -> favicon.ico
# curl http://localhost:8080/testdir              -> testdir/index.html
#
# DIRECTORY LISTING:
# curl http://localhost:8080/imgs                 -> Directory listing with images
#
# CGI SCRIPT EXECUTION:
# curl http://localhost:8080/cgi-bin/hello.py     -> Execute Python CGI script
# curl http://localhost:8080/cgi-bin/hello.js     -> Execute JavaScript CGI script
#
# REDIRECTS:
# curl http://localhost:8080/old-page             -> Redirect to /imgs
#
# WHAT WON'T WORK ON SERVER 1:
# curl http://localhost:8080/api                  -> 404 (no API routes)
# curl http://localhost:8080/uploads              -> 404 (no upload routes)
# curl http://localhost:8080/admin                -> 404 (no admin routes)
# curl http://localhost:8080/errors               -> 404 (no error routes)

# =============================================================================
# SERVER 2: API & FILE MANAGEMENT SERVER (Port 8081)
# Focus: REST API, file uploads, admin functions, error pages
# =============================================================================
#
# API ENDPOINTS:
# curl http://localhost:8081/                    -> api_landing.html
# curl http://localhost:8081/api                 -> api_response.html
# curl http://localhost:8081/api/v1              -> Redirect to /api
#
# FILE UPLOAD & MANAGEMENT:
# curl http://localhost:8081/uploads             -> Directory listing
# curl -X POST -F "file=@test.txt" http://localhost:8081/uploads  -> Upload file
# curl -X DELETE http://localhost:8081/uploads/test.txt          -> Delete file
#
# ADMIN FUNCTIONS:
# curl http://localhost:8081/admin               -> admin_dashboard.html
# curl -X POST http://localhost:8081/admin       -> Admin with POST
#
# ERROR PAGES:
# curl http://localhost:8081/errors              -> Error page directory
# curl http://localhost:8081/errors/404          -> 404 error page
# curl http://localhost:8081/errors/405          -> 405 error page
# curl http://localhost:8081/errors/500          -> 500 error page
#
# WHAT WON'T WORK ON SERVER 2:
# curl http://localhost:8081/cgi-bin/hello.py    -> 404 (no CGI routes)
# curl http://localhost:8081/favicon.ico         -> 404 (no favicon route)
# curl http://localhost:8081/imgs                -> 404 (imgs route on server 1 only)
# curl http://localhost:8081/testdir             -> 404 (testdir route on server 1 only)

# =============================================================================
# CROSS-SERVER ISOLATION DEMONSTRATION
# =============================================================================
# These requests show how servers are completely isolated:
#
# SERVER 1 routes that don't exist on SERVER 2:
# curl http://localhost:8081/cgi-bin/hello.py    -> 404 (SERVER 2 has no CGI)
# curl http://localhost:8081/favicon.ico         -> 404 (SERVER 2 has no favicon)
# curl http://localhost:8081/testdir             -> 404 (SERVER 2 has no testdir)
#
# SERVER 2 routes that don't exist on SERVER 1:
# curl http://localhost:8080/api                 -> 404 (SERVER 1 has no API)
# curl http://localhost:8080/uploads             -> 404 (SERVER 1 has no uploads)
# curl http://localhost:8080/admin               -> 404 (SERVER 1 has no admin)
# curl http://localhost:8080/errors              -> 404 (SERVER 1 has no errors)
#
# METHOD RESTRICTIONS:
# curl -X POST http://localhost:8080/            -> 405 (SERVER 1 root only allows GET/)
# curl -X DELETE http://localhost:8080/uploads  -> 405 (SERVER 1 uploads route doesn't exist)

# =============================================================================
# SERVER COMPARISON SUMMARY
# =============================================================================
#
# SERVER 1 (Static Content):
# - Port: 8080
# - Purpose: Static files, CGI execution, directory listings
# - Routes: /, /cgi-bin/*, /imgs, /favicon.ico, /testdir, /old-page
# - Methods: GET/ (mostly), POST for CGI
# - Features: CGI scripts (.py/.js), directory autoindex, redirects
# - Files: index.html, favicon.ico, actual images, working CGI scripts
#
# SERVER 2 (API & File Management):
# - Port: 8081
# - Purpose: REST API, file uploads, admin functions, error pages
# - Routes: /, /api, /uploads, /admin, /errors, /api/v1
# - Methods: Full REST (GET/POST/DELETE)
# - Features: File upload/delete, admin dashboard, error pages, API redirects
# - Files: api_landing.html, api_response.html, admin_dashboard.html, error pages
#
# This configuration demonstrates:
# 1. Complete server isolation - each server serves different content
# 2. Realistic file structure based on actual existing files
# 3. Proper method restrictions for different endpoints
# 4. Functional webserver with upload/delete capabilities
# 5. Server-aware routing with clear separation of concerns
# =============================================================================
